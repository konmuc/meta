openapi: "3.0.0"
info:
  title: https://kongeos-muenchen.de API
  version: v1
servers:
  - url: https://app.kongeos-muenchen.de/v1/
  - url: https://app.kongeos-muc.de/v1/
paths:
  /signup:
    post:
      summary: Registers a new user
      tags:
        - authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                  example: TestiTestmann123
                password:
                  type: string
                  example: '*******'
      responses:
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '200':
          description: A new user got registered
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
                    example: TestiTestmann123
                    description: The user name.
        '409':
          description: The user already exists.
          content:
            application/json:
              schema:
                type: string
        

  /signin:
    post:
      tags:
        - authentication
      summary: Logs a user in
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                  example: TestiTestmann123
                password:
                  type: string
                  example: '*******'
      responses:
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '200':
          description: User got authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                  refreshToken:
                    type: string
                  expiresIn:
                    type: integer
                  clientId:
                    type: string

  /signout:
    post:
      tags:
        - authentication
      summary: Logs a user out
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - clientId
              properties:
                username:
                  type: string
                  example: TestiTestmann123
                clientId:
                  type: string
      responses:
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '200':
          description: User got signed out
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
                    example: TestiTestmann123

  /token:
    post:
      tags:
        - authentication
      summary: Regenerates atoken
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                refreshToken:
                  type: string
                clientId:
                  type: string
      responses:
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '200':
          description: Got new token
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                  expiresIn:
                    type: integer

  /users:
    get:
      summary: Returns a list of all user names.
      tags:
        - user
      responses:
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '200':
          description: Userlist
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/user'


  /users/{username}:
    get:
      summary: Returns the information about a user
      tags:
        - user
      parameters:
        - $ref: '#/components/parameters/userParam'
      responses:
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '200':
          description: Get Userdata
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
    patch:
      summary: Update the user profile
      tags:
        - user
      parameters:
        - $ref: '#/components/parameters/userParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user'
      responses:
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '204':
          description: Successfull patch of user profile
  
  /users/{username}/posts:
    get:
      summary: Returns all post that a user commited.
      tags:
        - user
        - feed
      parameters:
        - $ref: '#/components/parameters/userParam'
      responses:
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '200':
          description: Get all posts of user
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/post'

  /posts:
    get:
      summary: Returns an amount of posts
      tags:
        - feed
      parameters:
        - name: orderBy
          in: query
          schema:
            type: string
            enum: [ latest, top, comment ]
        
      responses:
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '200':
          description: got latests posts
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/post'
                
    post:
      summary: Creates a post
      tags:
        - feed
      requestBody:
        content: 
          application/json:
            schema:
              $ref: '#/components/schemas/post'
      responses:
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '200':
          description: post created
          content:
            application/json:
              schema:
                description: postid
                type: string
      
  /posts/{postId}:
    get:
      summary: Returns a post
      tags:
        - feed
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: string
      responses:
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '200':
          description: get specific post
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/post'
    delete:
      summary: Hides a post from the feed
      tags:
        - feed
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: string
            
      responses:
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '200':
          description: deleted post successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Post (postId) got deleted.

  /events:
    get:
      summary: Returns a list of events
      tags:
        - events
      responses:
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '200':
          description: get all events
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/event'
    post:
      summary: Creates a new event
      tags:
        - events
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/event'
      responses:
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '200':
          description: successfully created event
          content:
            application/json:
              schema:
                type: string
                example: EventID
          
  
  /events/{eventId}:
    get:
      summary: Returns specific event
      tags:
        - events
      parameters:
        - name: eventId
          in: path
          required: true
          schema:
            type: string
      responses:
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '200':
          description: got specific event
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/event'
    delete:
      summary: Deletes specific event by id
      tags:
        - events
      parameters:
        - name: eventId
          in: path
          required: true
          schema:
            type: string
      responses:
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '200':
          description: deleted specific event
          content:
            application/json:
              schema:
                type: string
                example: successfully deleted event {eventId}
          

                  
# Define reusable components                 
components:

  schemas:
  
    error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
        message:
          type: string
        stacktrace:
          type: object
  
    event:
      type: object
      properties:
        eventId:
          type: string
        name:
          type: string
        description:
          type: string
        location:
          type: object
          properties:
            address:
              type: string
            room:
              type: string
            geolocation:
              $ref: '#/components/schemas/geolocation'
        time:
          type: object
          properties:
            start:
              type: integer
              description: Unix timestamp
            end:
              type: integer
              description: Unix timestamp
        notification:
          type: object
          properties:
            enabled:
              type: boolean
            time:
              type: integer
              description: Unix timestamp

    post:
      type: object
      properties:
        postId:
          type: string
        username:
          type: string
          example: TestiTestmann123
        content:
          type: object
          properties:
            text:
              type: string
            meta:
              type: object
              properties:
                date:
                  type: integer
                image:
                  type: string
                  description: Base64 encoded image
                geoloation:
                  $ref: '#/components/schemas/geolocation'
        votes:
          $ref: '#/components/schemas/votes'
        comments:
          type: array
          items:
            $ref: '#/components/schemas/comment'
        isHidden:
          type: boolean
          default: false

    comment:
      type: object
      properties:
        text:
          type: string
        date:
          type: integer
        username:
          type: string
        votes:
          $ref: '#/components/schemas/votes'

    votes:
      type: object
      properties:
        upvotes:
          type: integer
        downvotes:
          type: integer

    geolocation:
      type: object
      properties:
        lat:
          type: number
        long:
          type: number

    user:
      type: object
      required:
        - username
        - role
        - isBanned
      properties:
        username:
          type: string
          example: TestiTestmann123
        gender:
          type: string
          enum: [female, male, transgender, unicorn, unknown]
          example: unicorn
        firstname:
          type: string
          example: Testi
        lastname:
          type: string
          example: Testmann
        email:
          type: string
          example: testmann@example.com
        profilePicture:
          type: string
          description: Profile picture as base64 encoded string
        motto:
          type: string
          example: Halt, Stopp! Suche Freunde!
        university:
          type: string
          enum: [ Technische Universität München, Hochschule München, ... ]
          example: Hochschule Müenchen
        cityExcursion:
          type: string
          enum: [ Stadtrundgang, Brauereibesichtigung, ... ]
          example: Stadtrundgang
        professinalExcursion:
          type: string
          enum: [ Flughafen München, Trimble Terrasat, ... ]
          example: Trimble Terrasat
        role:
          type: string
          enum: [ admin, user ]
          default: user
        isBanned:
          type: boolean
          default: false

  # Define reusable parameters
  parameters:
    userParam:
      in: path
      name: username
      required: true
      schema:
        type: string
      description: this is the username
